{"version":3,"sources":["api-test.js"],"names":["test","require","request","sinon","proxyquire","agent","metric","metricType","uuid","server","sandbox","dbStub","AgentStub","MetricStub","beforeEach","create","findByConnected","stub","returns","Promise","resolve","connected","findByUuid","byUuid","findByAgentUuid","byAgentId","id","findByTypeAgentUuid","byTypeAgentId","Agent","Metric","api","afterEach","restore","serial","cb","t","get","expect","end","err","res","falsy","body","JSON","stringify","agentConnected","agents","deepEqual","message","console","log","todo","metrics"],"mappings":"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","file":"api-test.js","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst request = require('supertest')\r\nconst sinon = require('sinon')\r\nconst proxyquire = require('proxyquire')\r\nconst { agent, metric } = require('platziverse-test')\r\n\r\nconst metricType = 'Humedad'\r\nconst uuid = 'yyy-yyy-yyy'\r\nlet server = null\r\nlet sandbox = null\r\nlet dbStub = null\r\nlet AgentStub = {}\r\nlet MetricStub = {}\r\n\r\ntest.beforeEach(async () => {\r\n  sandbox = sinon.sandbox.create()\r\n\r\n  // AgentStub for findByConnect\r\n  AgentStub.findByConnected = sandbox.stub()\r\n  AgentStub.findByConnected.returns(Promise.resolve(agent.connected))\r\n\r\n  // AgentStub for findByUuid\r\n  AgentStub.findByUuid = sandbox.stub()\r\n  AgentStub.findByUuid.returns(Promise.resolve(agent.byUuid(uuid)))\r\n\r\n  // MetricStub for findByAgentUuid\r\n  MetricStub.findByAgentUuid = sandbox.stub()\r\n  MetricStub.findByAgentUuid.returns(Promise.resolve(metric.byAgentId(agent.byUuid(uuid).id)))\r\n\r\n  //MetricStub for findByTypeAgentUuid\r\n  MetricStub.findByTypeAgentUuid = sandbox.stub()\r\n  MetricStub.findByTypeAgentUuid.returns(Promise.resolve(metric.byTypeAgentId(agent.byUuid(uuid).id, metricType)))\r\n\r\n  dbStub = sandbox.stub()\r\n  dbStub.returns(Promise.resolve({\r\n    Agent: AgentStub,\r\n    Metric: MetricStub\r\n  }))\r\n\r\n  const api = proxyquire('../api', {\r\n    '../platziverse-db': dbStub\r\n  })\r\n\r\n  server = proxyquire('../server', {\r\n    './api': api\r\n  })\r\n})\r\n\r\ntest.afterEach(async () => {\r\n  if (sandbox) sandbox = sinon.sandbox.restore()\r\n})\r\n\r\ntest.serial.cb('/api/agents', t => {\r\n  request(server)\r\n    .get('/api/agents')\r\n    .expect(200)\r\n    .expect('Content-Type', /json/)\r\n    .expect('X-Powered-By', /Express/)\r\n    .end((err, res) => {\r\n      t.falsy(err, `Hay un error en la ruta /api/agents`)\r\n\r\n      const body = JSON.stringify(res.body)\r\n      const agentConnected = JSON.stringify({ agents: agent.connected })\r\n\r\n      t.deepEqual(body, agentConnected, `La respuesta ${res.body.message}, no es la correcta `)\r\n      t.end()\r\n    })\r\n})\r\n\r\ntest.serial.cb('/api/agent/:uuid', t => {\r\n  request(server)\r\n    .get('/api/agent/yyy-yyy-yyy')\r\n    .expect(200)\r\n    .expect('Content-Type', /json/)\r\n    .expect('X-Powered-By', /Express/)\r\n    .end((err, res) => {\r\n      t.falsy(err, 'No puede haber un error en la ruta /api/agent/:uuid')\r\n      const body = JSON.stringify(res.body)\r\n      const Agent = JSON.stringify({ agent: agent.byUuid(uuid) })\r\n      console.log(Agent)\r\n      console.log(`-----oro----`)\r\n      console.log(body)\r\n      t.deepEqual(body, Agent, 'Los agentes no pueden ser diferentes')\r\n      t.end()\r\n    })\r\n})\r\n\r\ntest.serial.todo('/api/agent/:uuid - not found')\r\n\r\ntest.serial.cb('/api/metrics/:uuid', t => {\r\n  request(server)\r\n    .get('/api/metrics/yyy-yyy-yyy')\r\n    .expect(200)\r\n    .expect('Content-Type', /json/)\r\n    .expect('X-Powered-By', /Express/)\r\n    .end((err, res) => {\r\n      t.falsy(err, 'No puede ocurrir un error en la ruta /api/metrics/yyy-yyy-yyy')\r\n\r\n      const body = JSON.stringify(res.body)\r\n      const metrics = JSON.stringify({ metrics: metric.byAgentId(agent.byUuid(uuid).id) })\r\n\r\n      t.deepEqual(body, metrics, 'La respuesta tiene que ser correcta')\r\n      t.end()\r\n    })\r\n})\r\n\r\ntest.serial.todo('/api/metrics/:uuid - not found')\r\n\r\ntest.serial.cb('/api/metrics/:uuid/:type', t => {\r\n  request(server)\r\n    .get(`/api/metrics/${uuid}/${metricType}`)\r\n    .expect(200)\r\n    .expect('Content-Type', /json/)\r\n    .expect('X-Powered-By', /Express/)\r\n    .end((err, res) => {\r\n      t.falsy(err, `No puede ocurrir un error en la ruta /api/metrics/${uuid}/${metricType}`)\r\n\r\n      const metrics = JSON.stringify({ metrics: metric.byTypeAgentId(agent.byUuid(uuid).id, metricType) })\r\n      const body = JSON.stringify(res.body)\r\n\r\n      t.deepEqual(body, metrics, `La respuesta debe ser la correcta en la runta /api/metrics/${uuid}/${metricType}`)\r\n    })\r\n    \r\n  t.end()\r\n})\r\ntest.serial.todo('/api/metrics/:uuid/:type - not found')\r\n"]}