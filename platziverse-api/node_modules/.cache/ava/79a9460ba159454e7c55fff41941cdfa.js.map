{"version":3,"sources":["api-test.js"],"names":["test","require","request","sinon","proxyquire","agent","metric","server","sandbox","dbStub","AgentStub","MetricStub","beforeEach","create","findByConnected","stub","returns","Promise","resolve","connected","Agent","Metric","api","afterEach","restore","serial","cb","t","get","expect","end","err","res","falsy","body","JSON","stringify","agentConnected","agents","deepEqual","message","todo"],"mappings":"AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,UAAUD,QAAQ,WAAR,CAAhB;AACA,MAAME,QAAQF,QAAQ,OAAR,CAAd;AACA,MAAMG,aAAaH,QAAQ,YAAR,CAAnB;AACA,MAAM,EAAEI,KAAF,EAASC,MAAT,KAAoBL,QAAQ,kBAAR,CAA1B;;AAEA,IAAIM,SAAS,IAAb;AACA,IAAIC,UAAU,IAAd;AACA,IAAIC,SAAS,IAAb;AACA,IAAIC,YAAY,EAAhB;AACA,IAAIC,aAAa,EAAjB;;AAEAX,KAAKY,UAAL,CAAgB,YAAY;AAC1BJ,YAAUL,MAAMK,OAAN,CAAcK,MAAd,EAAV;;AAGAH,YAAUI,eAAV,GAA4BN,QAAQO,IAAR,EAA5B;AACAL,YAAUI,eAAV,CAA0BE,OAA1B,CAAkCC,QAAQC,OAAR,CAAgBb,MAAMc,SAAtB,CAAlC;;AAEAV,WAASD,QAAQO,IAAR,EAAT;AACAN,SAAOO,OAAP,CAAeC,QAAQC,OAAR,CAAgB;AAC7BE,WAAOV,SADsB;AAE7BW,YAAQV;AAFqB,GAAhB,CAAf;;AAKA,QAAMW,MAAMlB,WAAW,QAAX,EAAqB;AAC/B,yBAAqBK;AADU,GAArB,CAAZ;;AAIAF,WAASH,WAAW,WAAX,EAAwB;AAC/B,aAASkB;AADsB,GAAxB,CAAT;AAGD,CApBD;;AAsBAtB,KAAKuB,SAAL,CAAe,YAAY;AACzB,MAAGf,OAAH,EAAYA,UAAUL,MAAMK,OAAN,CAAcgB,OAAd,EAAV;AACb,CAFD;;AAIAxB,KAAKyB,MAAL,CAAYC,EAAZ,CAAe,aAAf,EAA8BC,KAAK;AACjCzB,UAAQK,MAAR,EACGqB,GADH,CACO,aADP,EAEGC,MAFH,CAEU,GAFV,EAGGA,MAHH,CAGU,cAHV,EAG0B,MAH1B,EAIGA,MAJH,CAIU,cAJV,EAI0B,SAJ1B,EAKGC,GALH,CAKO,CAACC,GAAD,EAAMC,GAAN,KAAc;AAAA;;AACjBL,MAAEM,KAAF,uBAAQF,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAc,qCAAd;;AAEA,UAAMG,OAAOC,KAAKC,SAAL,CAAeJ,IAAIE,IAAnB,CAAb;AACA,UAAMG,iBAAiBF,KAAKC,SAAL,CAAe,EAAEE,QAAQjC,MAAMc,SAAhB,EAAf,CAAvB;;AAEAQ,MAAEY,SAAF,CAAYL,IAAZ,EAAkBG,cAAlB,EAAmC,gBAAeL,IAAIE,IAAJ,CAASM,OAAQ,sBAAnE;AACAb,MAAEG,GAAF;AACD,GAbH;AAcD,CAfD;;AAiBA9B,KAAKyB,MAAL,CAAYgB,IAAZ,CAAiB,kBAAjB;AACAzC,KAAKyB,MAAL,CAAYgB,IAAZ,CAAiB,8BAAjB;;AAEAzC,KAAKyB,MAAL,CAAYgB,IAAZ,CAAiB,oBAAjB;AACAzC,KAAKyB,MAAL,CAAYgB,IAAZ,CAAiB,gCAAjB;;AAEAzC,KAAKyB,MAAL,CAAYgB,IAAZ,CAAiB,0BAAjB;AACAzC,KAAKyB,MAAL,CAAYgB,IAAZ,CAAiB,qCAAjB","file":"api-test.js","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst request = require('supertest')\r\nconst sinon = require('sinon')\r\nconst proxyquire = require('proxyquire')\r\nconst { agent, metric } = require('platziverse-test')\r\n\r\nlet server = null\r\nlet sandbox = null \r\nlet dbStub = null\r\nlet AgentStub = {}\r\nlet MetricStub = {}\r\n\r\ntest.beforeEach(async () => {\r\n  sandbox = sinon.sandbox.create()\r\n\r\n  \r\n  AgentStub.findByConnected = sandbox.stub()\r\n  AgentStub.findByConnected.returns(Promise.resolve(agent.connected))\r\n\r\n  dbStub = sandbox.stub()\r\n  dbStub.returns(Promise.resolve({\r\n    Agent: AgentStub,\r\n    Metric: MetricStub\r\n  }))\r\n\r\n  const api = proxyquire('../api', {\r\n    '../platziverse-db': dbStub\r\n  })\r\n\r\n  server = proxyquire('../server', {\r\n    './api': api\r\n  })\r\n})\r\n\r\ntest.afterEach(async () => {\r\n  if(sandbox) sandbox = sinon.sandbox.restore()\r\n})\r\n\r\ntest.serial.cb('/api/agents', t => {\r\n  request(server)\r\n    .get('/api/agents')\r\n    .expect(200)\r\n    .expect('Content-Type', /json/)\r\n    .expect('X-Powered-By', /Express/)\r\n    .end((err, res) => {\r\n      t.falsy(err, `Hay un error en la ruta /api/agents`)\r\n\r\n      const body = JSON.stringify(res.body)\r\n      const agentConnected = JSON.stringify({ agents: agent.connected })\r\n\r\n      t.deepEqual(body, agentConnected, `La respuesta ${res.body.message}, no es la correcta `)\r\n      t.end()\r\n    })\r\n})\r\n\r\ntest.serial.todo('/api/agent/:uuid')\r\ntest.serial.todo('/api/agent/:uuid - not found')\r\n\r\ntest.serial.todo('/api/metrics/:uuid')\r\ntest.serial.todo('/api/metrics/:uuid - not found')\r\n\r\ntest.serial.todo('/api/metrics/:uuid/:type')\r\ntest.serial.todo('/api/metrics/:uuid/:type -not found')\r\n\r\n"]}