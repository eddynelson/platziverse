'use strict';

var _powerAssertVisitorKeys = '{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareOpaqueType":["id","typeParameters","supertype"],"DeclareVariable":["id"],"DeclareExportDeclaration":["declaration","specifiers","source"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"EmptyTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"OpaqueType":["id","typeParameters","impltype","supertype"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"ObjectTypeSpreadProperty":["argument"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXSpreadChild":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Import":[],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}',
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

const test = require('ava');
const request = require('supertest');
const sinon = require('sinon');
const util = require('util');
const proxyquire = require('proxyquire');
const { agent, metric } = require('platziverse-test');
const auth = require('../auth');
const sign = util.promisify(auth.sign);

let tokenAdmin = null;
let tokenNoAdmin = null;
const metricType = 'Humedad';
const uuid = 'yyy-yyy-yyy';
const username = 'platziverse';
let server = null;
let sandbox = null;
let dbStub = null;
let AgentStub = {};
let MetricStub = {};

test.beforeEach(async () => {
  sandbox = sinon.sandbox.create();

  // AgentStub for findByConnect and findByUsername
  AgentStub.findByConnected = sandbox.stub();
  AgentStub.findByConnected.returns(Promise.resolve(agent.connected));

  AgentStub.findByUsername = sandbox.stub();
  AgentStub.findByUsername.withArgs(username).returns(Promise.resolve(agent.byUsername(username)));

  // AgentStub for findByUuid
  AgentStub.findByUuid = sandbox.stub();
  AgentStub.findByUuid.withArgs(uuid).returns(Promise.resolve(agent.byUuid(uuid)));

  // MetricStub for findByAgentUuid
  MetricStub.findByAgentUuid = sandbox.stub();
  MetricStub.findByAgentUuid.withArgs(uuid).returns(Promise.resolve(metric.byAgentId(agent.byUuid(uuid))));

  // tokens
  tokenAdmin = await sign({ username, admin: true }, 'platziverse');
  tokenNoAdmin = await sign({ username }, 'platziverse');

  dbStub = sandbox.stub();
  dbStub.returns(Promise.resolve({
    Agent: AgentStub,
    Metric: MetricStub
  }));

  const api = proxyquire('../api', {
    '../platziverse-db': dbStub
  });

  server = proxyquire('../server', {
    './api': api
  });
});

test.afterEach(async () => {
  if (sandbox) sandbox = sinon.sandbox.restore();
});

test.serial.cb('/api/agents', t => {
  request(server).get('/api/agents').set('Authorization', `Bearer ${tokenAdmin}`).expect(200).expect('Content-Type', /json/).expect('X-Powered-By', /Express/).end((err, res) => {
    var _rec = new _powerAssertRecorder();

    t.falsy(_rec._expr(_rec._capt(err, 'arguments/0'), {
      content: 't.falsy(err, `Hay un error en la ruta /api/agents`)',
      filepath: 'tests/api-test.js',
      line: 72,
      ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"falsy","range":[2,7]},"computed":false,"range":[0,7]},"arguments":[{"type":"Identifier","name":"err","range":[8,11]},{"type":"TemplateLiteral","quasis":[{"type":"TemplateElement","value":{"raw":"Hay un error en la ruta /api/agents","cooked":"Hay un error en la ruta /api/agents"},"tail":true,"range":[14,49]}],"expressions":[],"range":[13,50]}],"range":[0,51]}',
      tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"falsy","range":[2,7]},{"type":{"label":"("},"range":[7,8]},{"type":{"label":"name"},"value":"err","range":[8,11]},{"type":{"label":","},"range":[11,12]},{"type":{"label":"`"},"range":[13,14]},{"type":{"label":"template"},"value":"Hay un error en la ruta /api/agents","range":[14,49]},{"type":{"label":"`"},"range":[49,50]},{"type":{"label":")"},"range":[50,51]}]',
      visitorKeys: _powerAssertVisitorKeys
    }), `Hay un error en la ruta /api/agents`);

    const body = JSON.stringify(res.body);
    const agentConnected = JSON.stringify(agent.connected);

    t.deepEqual(body, agentConnected, `La respuesta ${res.body.message}, no es la correcta `);
    t.end();
  });
});

test.serial.cb('/api/agents - not admin', t => {
  request(server).get('/api/agents').set('Authorization', `Bearer ${tokenNoAdmin}`).expect(200).expect('Content-Type', /json/).expect('X-Powered-By', /Express/).end((err, res) => {
    var _rec2 = new _powerAssertRecorder();

    t.falsy(_rec2._expr(_rec2._capt(err, 'arguments/0'), {
      content: 't.falsy(err, \'No puede ocurrir un error en la ruta /api/agents\')',
      filepath: 'tests/api-test.js',
      line: 90,
      ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"falsy","range":[2,7]},"computed":false,"range":[0,7]},"arguments":[{"type":"Identifier","name":"err","range":[8,11]},{"type":"StringLiteral","value":"No puede ocurrir un error en la ruta /api/agents","range":[13,63]}],"range":[0,64]}',
      tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"falsy","range":[2,7]},{"type":{"label":"("},"range":[7,8]},{"type":{"label":"name"},"value":"err","range":[8,11]},{"type":{"label":","},"range":[11,12]},{"type":{"label":"string"},"value":"No puede ocurrir un error en la ruta /api/agents","range":[13,63]},{"type":{"label":")"},"range":[63,64]}]',
      visitorKeys: _powerAssertVisitorKeys
    }), 'No puede ocurrir un error en la ruta /api/agents');

    const body = JSON.stringify(res.body);
    const data = JSON.stringify(agent.byUsername(username));

    t.deepEqual(body, data, 'Los datos tienen que ser correcto en la ruta /api/agents');
    t.end();
  });
});

test.serial.cb('/api/agent/:uuid', t => {
  request(server).get('/api/agent/yyy-yyy-yyy').expect(200).expect('Content-Type', /json/).expect('X-Powered-By', /Express/).end((err, res) => {
    var _rec3 = new _powerAssertRecorder();

    t.falsy(_rec3._expr(_rec3._capt(err, 'arguments/0'), {
      content: 't.falsy(err, \'No puede haber un error en la ruta /api/agent/yyy-yyy-yyy\')',
      filepath: 'tests/api-test.js',
      line: 107,
      ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"falsy","range":[2,7]},"computed":false,"range":[0,7]},"arguments":[{"type":"Identifier","name":"err","range":[8,11]},{"type":"StringLiteral","value":"No puede haber un error en la ruta /api/agent/yyy-yyy-yyy","range":[13,72]}],"range":[0,73]}',
      tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"falsy","range":[2,7]},{"type":{"label":"("},"range":[7,8]},{"type":{"label":"name"},"value":"err","range":[8,11]},{"type":{"label":","},"range":[11,12]},{"type":{"label":"string"},"value":"No puede haber un error en la ruta /api/agent/yyy-yyy-yyy","range":[13,72]},{"type":{"label":")"},"range":[72,73]}]',
      visitorKeys: _powerAssertVisitorKeys
    }), 'No puede haber un error en la ruta /api/agent/yyy-yyy-yyy');

    const body = JSON.stringify(res.body);
    const data = JSON.stringify(agent.byUuid(uuid));

    t.deepEqual(body, data, 'Los datos que retorna la ruta /api/agent/yyy-yyy-yyy tienen que ser correcto');
    t.end();
  });
});

test.serial.cb('/api/metrics/:uuid', t => {
  request(server).get(`/api/metrics/${uuid}`).expect(200).expect('Content-Type', /json/).expect('X-Powered-By', /Express/).end((err, res) => {
    var _rec4 = new _powerAssertRecorder();

    t.falsy(_rec4._expr(_rec4._capt(err, 'arguments/0'), {
      content: 't.falsy(err, \'No puede ocurrir un error en la ruta /api/metric/yyy-yyy-yyy\')',
      filepath: 'tests/api-test.js',
      line: 124,
      ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"falsy","range":[2,7]},"computed":false,"range":[0,7]},"arguments":[{"type":"Identifier","name":"err","range":[8,11]},{"type":"StringLiteral","value":"No puede ocurrir un error en la ruta /api/metric/yyy-yyy-yyy","range":[13,75]}],"range":[0,76]}',
      tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"falsy","range":[2,7]},{"type":{"label":"("},"range":[7,8]},{"type":{"label":"name"},"value":"err","range":[8,11]},{"type":{"label":","},"range":[11,12]},{"type":{"label":"string"},"value":"No puede ocurrir un error en la ruta /api/metric/yyy-yyy-yyy","range":[13,75]},{"type":{"label":")"},"range":[75,76]}]',
      visitorKeys: _powerAssertVisitorKeys
    }), 'No puede ocurrir un error en la ruta /api/metric/yyy-yyy-yyy');
    t.end();
  });
});
//# sourceMappingURL=../node_modules/.cache/ava/943ede824eff17a2a82867694d649786.js.map