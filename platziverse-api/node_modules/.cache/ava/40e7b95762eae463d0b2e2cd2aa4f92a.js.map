{"version":3,"sources":["api-test.js"],"names":["test","require","request","sinon","util","proxyquire","agent","metric","auth","sign","promisify","tokenAdmin","tokenNoAdmin","metricType","uuid","server","sandbox","dbStub","AgentStub","MetricStub","beforeEach","create","findByConnected","stub","returns","Promise","resolve","connected","username","admin","Agent","Metric","api","afterEach","restore","serial","cb","t","get","set","expect","end","err","res","falsy","body","JSON","stringify","agentConnected","deepEqual","message"],"mappings":"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","file":"api-test.js","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst request = require('supertest')\r\nconst sinon = require('sinon')\r\nconst util = require('util')\r\nconst proxyquire = require('proxyquire')\r\nconst { agent, metric } = require('platziverse-test')\r\nconst auth = require('../auth')\r\nconst sign = util.promisify(auth.sign)\r\n\r\nlet tokenAdmin = null\r\nlet tokenNoAdmin = null\r\nconst metricType = 'Humedad'\r\nconst uuid = 'yyy-yyy-yyy'\r\nlet server = null\r\nlet sandbox = null\r\nlet dbStub = null\r\nlet AgentStub = {}\r\nlet MetricStub = {}\r\n\r\ntest.beforeEach(async () => {\r\n  sandbox = sinon.sandbox.create()\r\n\r\n  // AgentStub for findByConnect\r\n  AgentStub.findByConnected = sandbox.stub()\r\n  AgentStub.findByConnected.returns(Promise.resolve(agent.connected))\r\n\r\n  //tokens\r\n  tokenAdmin = await sign({ username: 'platziverse', admin: true }, 'platziverse')\r\n  tokenNoAdmin = await sign({ username: 'platziverse' }, 'platziverse')\r\n\r\n  dbStub = sandbox.stub()\r\n  dbStub.returns(Promise.resolve({\r\n    Agent: AgentStub,\r\n    Metric: MetricStub\r\n  }))\r\n\r\n  const api = proxyquire('../api', {\r\n    '../platziverse-db': dbStub\r\n  })\r\n\r\n  server = proxyquire('../server', {\r\n    './api': api\r\n  })\r\n})\r\n\r\ntest.afterEach(async () => {\r\n  if (sandbox) sandbox = sinon.sandbox.restore()\r\n})\r\n\r\ntest.serial.cb('/api/agents', t => {\r\n  request(server)\r\n    .get('/api/agents')\r\n    .set('Authorization', `Bearer ${tokenAdmin}`)\r\n    .expect(200)\r\n    .expect('Content-Type', /json/)\r\n    .expect('X-Powered-By', /Express/)\r\n    .end((err, res) => {\r\n      t.falsy(err, `Hay un error en la ruta /api/agents`)\r\n\r\n      const body = JSON.stringify(res.body)\r\n      const agentConnected = JSON.stringify(agent.connected)\r\n      \r\n      t.deepEqual(body, agentConnected, `La respuesta ${res.body.message}, no es la correcta `)\r\n      t.end()\r\n    })\r\n})\r\n\r\ntest.serial.cb('/api/agents - not admin', t => {\r\n  request(server)\r\n    .get('/api/agents')\r\n    .set('Authorization', `Bearer ${tokenNoAdmin}`)\r\n    .expect(200)\r\n    .expect('Content-Type', /json/)\r\n    .expect('X-Powered-By', /Express/)\r\n    .end((err, res) => {\r\n      t.falsy(err, 'No puede ocurrir un error en la ruta /api/agents')\r\n      t.end()\r\n    })\r\n})\r\n"]}