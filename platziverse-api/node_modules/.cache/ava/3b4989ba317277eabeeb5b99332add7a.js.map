{"version":3,"sources":["api-test.js"],"names":["test","require","request","sinon","util","proxyquire","agent","metric","auth","sign","promisify","tokenReadMetrics","tokenAdmin","tokenNoAdmin","metricType","uuid","username","server","sandbox","dbStub","AgentStub","MetricStub","beforeEach","create","findByConnected","stub","returns","Promise","resolve","connected","findByUsername","withArgs","byUsername","findByUuid","byUuid","findByAgentUuid","byAgentId","id","admin","permissions","Agent","Metric","api","afterEach","restore","serial","cb","t","get","set","expect","end","err","res","falsy","body","JSON","stringify","agentConnected","deepEqual","message","data"],"mappings":"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","file":"api-test.js","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst request = require('supertest')\r\nconst sinon = require('sinon')\r\nconst util = require('util')\r\nconst proxyquire = require('proxyquire')\r\nconst { agent, metric } = require('platziverse-test')\r\nconst auth = require('../auth')\r\nconst sign = util.promisify(auth.sign)\r\n\r\nlet tokenReadMetrics\r\nlet tokenAdmin = null\r\nlet tokenNoAdmin = null\r\nconst metricType = 'Humedad'\r\nconst uuid = 'yyy-yyy-yyy'\r\nconst username = 'platziverse'\r\nlet server = null\r\nlet sandbox = null\r\nlet dbStub = null\r\nlet AgentStub = {}\r\nlet MetricStub = {}\r\n\r\ntest.beforeEach(async () => {\r\n  sandbox = sinon.sandbox.create()\r\n\r\n  // AgentStub for findByConnect and findByUsername\r\n  AgentStub.findByConnected = sandbox.stub()\r\n  AgentStub.findByConnected.returns(Promise.resolve(agent.connected))\r\n\r\n  AgentStub.findByUsername = sandbox.stub()\r\n  AgentStub.findByUsername.withArgs(username).returns(Promise.resolve(agent.byUsername(username)))\r\n\r\n  // AgentStub for findByUuid\r\n  AgentStub.findByUuid = sandbox.stub()\r\n  AgentStub.findByUuid.withArgs(uuid).returns(Promise.resolve(agent.byUuid(uuid)))\r\n\r\n  // MetricStub for findByAgentUuid\r\n  MetricStub.findByAgentUuid = sandbox.stub()\r\n  MetricStub.findByAgentUuid.withArgs(uuid).returns(Promise.resolve(metric.byAgentId(agent.byUuid(uuid).id)))\r\n\r\n  // tokens\r\n  tokenAdmin = await sign({ username, admin: true, permissions: ['metrics:read'] }, 'platziverse')\r\n  tokenNoAdmin = await sign({ username }, 'platziverse')\r\n\r\n  dbStub = sandbox.stub()\r\n  dbStub.returns(Promise.resolve({\r\n    Agent: AgentStub,\r\n    Metric: MetricStub\r\n  }))\r\n\r\n  const api = proxyquire('../api', {\r\n    '../platziverse-db': dbStub\r\n  })\r\n\r\n  server = proxyquire('../server', {\r\n    './api': api\r\n  })\r\n})\r\n\r\ntest.afterEach(async () => {\r\n  if (sandbox) sandbox = sinon.sandbox.restore()\r\n})\r\n\r\ntest.serial.cb('/api/agents', t => {\r\n  request(server)\r\n    .get('/api/agents')\r\n    .set('Authorization', `Bearer ${tokenAdmin}`)\r\n    .expect(200)\r\n    .expect('Content-Type', /json/)\r\n    .expect('X-Powered-By', /Express/)\r\n    .end((err, res) => {\r\n      t.falsy(err, `Hay un error en la ruta /api/agents`)\r\n\r\n      const body = JSON.stringify(res.body)\r\n      const agentConnected = JSON.stringify(agent.connected)\r\n\r\n      t.deepEqual(body, agentConnected, `La respuesta ${res.body.message}, no es la correcta `)\r\n      t.end()\r\n    })\r\n})\r\n\r\ntest.serial.cb('/api/agents - not admin', t => {\r\n  request(server)\r\n    .get('/api/agents')\r\n    .set('Authorization', `Bearer ${tokenNoAdmin}`)\r\n    .expect(200)\r\n    .expect('Content-Type', /json/)\r\n    .expect('X-Powered-By', /Express/)\r\n    .end((err, res) => {\r\n      t.falsy(err, 'No puede ocurrir un error en la ruta /api/agents')\r\n\r\n      const body = JSON.stringify(res.body)\r\n      const data = JSON.stringify(agent.byUsername(username))\r\n\r\n      t.deepEqual(body, data, 'Los datos tienen que ser correcto en la ruta /api/agents')\r\n      t.end()\r\n    })\r\n})\r\n\r\ntest.serial.cb('/api/agent/:uuid', t => {\r\n  request(server)\r\n    .get('/api/agent/yyy-yyy-yyy')\r\n    .expect(200)\r\n    .expect('Content-Type', /json/)\r\n    .expect('X-Powered-By', /Express/)\r\n    .end((err, res) => {\r\n      t.falsy(err, 'No puede haber un error en la ruta /api/agent/yyy-yyy-yyy')\r\n\r\n      const body = JSON.stringify(res.body)\r\n      const data = JSON.stringify(agent.byUuid(uuid))\r\n\r\n      t.deepEqual(body, data, 'Los datos que retorna la ruta /api/agent/yyy-yyy-yyy tienen que ser correcto')\r\n      t.end()\r\n    })\r\n})\r\n\r\ntest.serial.cb('/api/metrics/:uuid', t => {\r\n  request(server)\r\n    .get(`/api/metrics/${uuid}`)\r\n    .set('Authorization', `Bearer ${tokenAdmin}`)\r\n    .expect(200)\r\n    .expect('Content-Type', /json/)\r\n    .expect('X-Powered-By', /Express/)\r\n    .end((err, res) => {\r\n      t.falsy(err, 'No puede ocurrir un error en la ruta /api/metric/' + uuid)\r\n\r\n      const body = JSON.stringify(res.body)\r\n      const data = JSON.stringify(metric.byAgentId(agent.byUuid(uuid).id))\r\n\r\n      t.deepEqual(body, data, `Los datos tienen que ser correctos en la ruta /api/metrics${uuid}/${metricType}`)\r\n      t.end()\r\n    })\r\n})\r\n\r\ntest.serial.cb('/api/metrics/:uuid/:type', t => {\r\n  request(server)\r\n    .get(`/api/metrics/${uuid}/${metricType}`)\r\n    .set('Authorization', `Bearer ${tokenAdmin}`)\r\n    .expect(200)\r\n    .expect('Content-Type', /json/)\r\n    .expect('X-Powered-By', /Express/)\r\n    .end((err, res) => {\r\n      t.falsy(err, 'No puede ocurrir un error en la ruta /api/metric/' + uuid)\r\n      t.end()\r\n    })\r\n})"]}