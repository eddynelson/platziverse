{"version":3,"sources":["api-test.js"],"names":["test","require","request","sinon","proxyquire","agent","metric","uuid","server","sandbox","dbStub","AgentStub","MetricStub","beforeEach","create","findByConnected","stub","returns","Promise","resolve","connected","findByUuid","byUuid","Agent","Metric","api","afterEach","restore","serial","cb","t","get","expect","end","err","res","falsy","body","JSON","stringify","agentConnected","agents","deepEqual","message","todo"],"mappings":"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","file":"api-test.js","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst request = require('supertest')\r\nconst sinon = require('sinon')\r\nconst proxyquire = require('proxyquire')\r\nconst { agent, metric } = require('platziverse-test')\r\n\r\nconst uuid = 'yyy-yyy-yyy'\r\nlet server = null\r\nlet sandbox = null \r\nlet dbStub = null\r\nlet AgentStub = {}\r\nlet MetricStub = {}\r\n\r\ntest.beforeEach(async () => {\r\n  sandbox = sinon.sandbox.create()\r\n\r\n  //AgentStub for findByConnect\r\n  AgentStub.findByConnected = sandbox.stub()\r\n  AgentStub.findByConnected.returns(Promise.resolve(agent.connected))\r\n\r\n  //AgentStub for findByConnect\r\n  AgentStub.findByUuid = sandbox.stub()\r\n  AgentStub.findByUuid.returns(Promise.resolve(agent.byUuid(uuid)))\r\n\r\n\r\n  dbStub = sandbox.stub()\r\n  dbStub.returns(Promise.resolve({\r\n    Agent: AgentStub,\r\n    Metric: MetricStub\r\n  }))\r\n\r\n  const api = proxyquire('../api', {\r\n    '../platziverse-db': dbStub\r\n  })\r\n\r\n  server = proxyquire('../server', {\r\n    './api': api\r\n  })\r\n})\r\n\r\ntest.afterEach(async () => {\r\n  if(sandbox) sandbox = sinon.sandbox.restore()\r\n})\r\n\r\ntest.serial.cb('/api/agents', t => {\r\n  request(server)\r\n    .get('/api/agents')\r\n    .expect(200)\r\n    .expect('Content-Type', /json/)\r\n    .expect('X-Powered-By', /Express/)\r\n    .end((err, res) => {\r\n      t.falsy(err, `Hay un error en la ruta /api/agents`)\r\n\r\n      const body = JSON.stringify(res.body)\r\n      const agentConnected = JSON.stringify({ agents: agent.connected })\r\n\r\n      t.deepEqual(body, agentConnected, `La respuesta ${res.body.message}, no es la correcta `)\r\n      t.end()\r\n    })\r\n})\r\n\r\ntest.serial.cb('/api/agent/:uuid', t => {\r\n  request(server)\r\n    .get('/api/agent/yyy-yyy-yyy')\r\n    .expect(200)\r\n    .expect('Content-Type', /json/)\r\n    .expect('X-Powered-By', /Express/)\r\n    .end((err, res) => {\r\n      t.falsy(err, 'No puede haber un error en la ruta /api/agent/:uuid')\r\n\r\n      const body = JSON.stringify(res.body)\r\n      const Agent = JSON.stringify({ agent: agent.byUuid(uuid) })\r\n\r\n      t.deepEqual(body, Agent, 'Los agentes no pueden ser diferentes')\r\n      t.end()\r\n    })\r\n})\r\n// test.serial.cb('/api/agent/:uuid - not found', t => {\r\n//   request(server)\r\n//     .get('/api/agent/yyy')\r\n//     .expect(404)\r\n//     .expect('X-Powered-By', /Express/)\r\n//     .end((err, res) => {\r\n//       t.falsy(err, 'No puede mandar error')\r\n//     })\r\n// })\r\n\r\ntest.serial.todo('/api/metrics/:uuid')\r\ntest.serial.todo('/api/metrics/:uuid - not found')\r\n\r\ntest.serial.todo('/api/metrics/:uuid/:type')\r\ntest.serial.todo('/api/metrics/:uuid/:type - not found')\r\n\r\n"]}